// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SplitApi.Models;

namespace splitapi.Migrations
{
    [DbContext(typeof(SplitContext))]
    [Migration("20190224100512_UserTable")]
    partial class UserTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SplitApi.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SplitApi.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id");

                    b.Property<string>("CategoryType")
                        .HasColumnName("categoryType");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SplitApi.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountIn")
                        .HasColumnName("accountIn");

                    b.Property<Guid?>("AccountOut")
                        .HasColumnName("accountOut");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("money");

                    b.Property<Guid?>("Category")
                        .HasColumnName("category");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<bool>("IsShared")
                        .HasColumnName("isShared");

                    b.Property<Guid?>("TransactionParty")
                        .HasColumnName("transactionParty");

                    b.HasKey("Id");

                    b.HasIndex("AccountIn");

                    b.HasIndex("AccountOut");

                    b.HasIndex("Category");

                    b.HasIndex("TransactionParty");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SplitApi.Models.TransactionParty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id");

                    b.Property<Guid?>("DefaultCategory")
                        .HasColumnName("defaultCategory");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCategory");

                    b.ToTable("Transaction_Party");
                });

            modelBuilder.Entity("SplitApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SplitApi.Models.Transaction", b =>
                {
                    b.HasOne("SplitApi.Models.Account", "AccountInNavigation")
                        .WithMany("TransactionAccountInNavigation")
                        .HasForeignKey("AccountIn")
                        .HasConstraintName("Transaction_accountIn_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SplitApi.Models.Account", "AccountOutNavigation")
                        .WithMany("TransactionAccountOutNavigation")
                        .HasForeignKey("AccountOut")
                        .HasConstraintName("Transaction_accountOut_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SplitApi.Models.Category", "CategoryNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("Category")
                        .HasConstraintName("Transaction_category_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SplitApi.Models.TransactionParty", "TransactionPartyNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionParty")
                        .HasConstraintName("Transaction_transactionParty_fkey")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SplitApi.Models.TransactionParty", b =>
                {
                    b.HasOne("SplitApi.Models.Category", "DefaultCategoryNavigation")
                        .WithMany("TransactionParties")
                        .HasForeignKey("DefaultCategory")
                        .HasConstraintName("Transaction_Party_defaultCategory_fkey")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
