// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Split.Models;

namespace split.Migrations
{
    [DbContext(typeof(SplitContext))]
    partial class SplitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:categorytype", "income,expense")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", "'uuid-ossp', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Split.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accountId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnName("accountName")
                        .HasColumnType("character varying(20)");

                    b.Property<int>("AccountType")
                        .HasColumnName("accountType");

                    b.Property<decimal?>("Balance")
                        .HasColumnName("balance")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("Limit")
                        .HasColumnName("limit")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnName("userId");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Split.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("categoryId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("categoryName")
                        .HasColumnType("character varying(25)");

                    b.Property<int>("CategoryType")
                        .HasColumnName("categoryType");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnName("userId");

                    b.HasKey("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Split.Models.SplitPayment", b =>
                {
                    b.Property<Guid>("SplitPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("splitPaymentId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("PayeeId")
                        .HasColumnName("payeeId");

                    b.Property<Guid>("TransactionId")
                        .HasColumnName("transactionId");

                    b.HasKey("SplitPaymentId");

                    b.HasIndex("PayeeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("SplitPayment");
                });

            modelBuilder.Entity("Split.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transactionId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("AccountInId")
                        .HasColumnName("accountInId");

                    b.Property<Guid?>("AccountOutId")
                        .HasColumnName("accountOutId");

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("money");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnName("categoryId");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsShared")
                        .HasColumnName("isShared");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transactionDate")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<Guid?>("TransactionPartyId")
                        .HasColumnName("transactionPartyId");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("userId");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountInId");

                    b.HasIndex("AccountOutId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TransactionPartyId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Split.Models.TransactionParty", b =>
                {
                    b.Property<Guid>("TransactionPartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transactionPartyId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DefaultCategoryId")
                        .HasColumnName("defaultCategoryId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("TransactionPartyName")
                        .IsRequired()
                        .HasColumnName("transactionPartyName")
                        .HasColumnType("character varying(25)");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("userId");

                    b.HasKey("TransactionPartyId");

                    b.HasIndex("DefaultCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionParty");
                });

            modelBuilder.Entity("Split.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool?>("ConfirmedEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("confirmedEmail")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isRegistered")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnName("lastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnName("passwordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnName("passwordSalt");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("User_email_key");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Split.Models.UserContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ContactId")
                        .HasColumnName("contactId");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContact");
                });

            modelBuilder.Entity("Split.Models.Account", b =>
                {
                    b.HasOne("Split.Models.User", "User")
                        .WithMany("Account")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Account_userId_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Split.Models.Category", b =>
                {
                    b.HasOne("Split.Models.User", "User")
                        .WithMany("Category")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Category_userId_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Split.Models.SplitPayment", b =>
                {
                    b.HasOne("Split.Models.User", "Payee")
                        .WithMany("SplitPayment")
                        .HasForeignKey("PayeeId")
                        .HasConstraintName("SplitPayment_payeeId_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Split.Models.Transaction", "Transaction")
                        .WithMany("SplitPayment")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("SplitPayment_transactionId_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Split.Models.Transaction", b =>
                {
                    b.HasOne("Split.Models.Account", "AccountIn")
                        .WithMany("TransactionAccountIn")
                        .HasForeignKey("AccountInId")
                        .HasConstraintName("Transaction_accountInId_fkey");

                    b.HasOne("Split.Models.Account", "AccountOut")
                        .WithMany("TransactionAccountOut")
                        .HasForeignKey("AccountOutId")
                        .HasConstraintName("Transaction_accountOutId_fkey");

                    b.HasOne("Split.Models.Category", "Category")
                        .WithMany("Transaction")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Transaction_categoryId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Split.Models.TransactionParty", "TransactionParty")
                        .WithMany("Transaction")
                        .HasForeignKey("TransactionPartyId")
                        .HasConstraintName("Transaction_transactionPartyId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Split.Models.User", "User")
                        .WithMany("Transaction")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Transaction_userId_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Split.Models.TransactionParty", b =>
                {
                    b.HasOne("Split.Models.Category", "DefaultCategory")
                        .WithMany("TransactionParty")
                        .HasForeignKey("DefaultCategoryId")
                        .HasConstraintName("TransactionParty_defaultCategoryId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Split.Models.User", "User")
                        .WithMany("TransactionParty")
                        .HasForeignKey("UserId")
                        .HasConstraintName("TransactionParty_userId_fkey")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Split.Models.UserContact", b =>
                {
                    b.HasOne("Split.Models.User", "Contact")
                        .WithMany("UserContactContact")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("UserContact_contactId_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Split.Models.User", "User")
                        .WithMany("UserContactUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserContact_userId_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
